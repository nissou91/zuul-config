- hosts: localhost
  tasks:
    - name: Spawn the mirror vexxhost ams1
      openstack.cloud.server:
        state: present
        cloud: vexxhost
        region_name: ams1
        image: Fedora-Cloud-Base-35-1.2.x86_64
        flavor: v3-standard-2
        name: mirror
        network: public
        key_name: goneri
      register: result
    - name: Add host ansible-vexxhost-ams1
      add_host:
        name: ansible-vexxhost-ams1
        groups:
          - mirrors
        ansible_ssh_host: "{{ result.server.public_v4 }}"
        ansible_ssh_user: fedora
        ansible_python_interpreter: /bin/python3
        ansible_ssh_extra_args: "-o stricthostkeychecking=no -o userknownhostsfile=/dev/null"
    - name: Spawn the mirror vexxhost ca-ymq-1
      openstack.cloud.server:
        state: present
        cloud: vexxhost
        region_name: ca-ymq-1
        image: Fedora-Cloud-Base-35-1.2.x86_64
        flavor: v3-standard-2
        name: mirror
        network: public
        key_name: goneri
      register: result
    - name: Add host ansible-vexxhost-ca-ymq-1
      add_host:
        name: ansible-vexxhost-ca-ymq-1
        groups:
          - mirrors
        ansible_ssh_host: "{{ result.server.public_v4 }}"
        ansible_ssh_user: fedora
        ansible_python_interpreter: /bin/python3
        ansible_ssh_extra_args: "-o stricthostkeychecking=no -o userknownhostsfile=/dev/null"
    - name: Spawn the mirror vexxhost sjc1
      openstack.cloud.server:
        state: present
        cloud: vexxhost
        region_name: sjc1
        image: Fedora-Cloud-Base-35-1.2.x86_64
        boot_from_volume: true
        volume_size: 50
        flavor: v2-highcpu-1
        name: mirror
        network: public
        key_name: goneri
      register: result
    - name: Add host ansible-vexxhost-sjc1
      add_host:
        name: ansible-vexxhost-sjc1
        groups:
          - mirrors
        ansible_ssh_host: "{{ result.server.public_v4 }}"
        ansible_ssh_user: fedora
        ansible_python_interpreter: /bin/python3
        ansible_ssh_extra_args: "-o stricthostkeychecking=no -o userknownhostsfile=/dev/null"
    - name: Spawn the mirror limestone us-dfw-1
      openstack.cloud.server:
        state: present
        cloud: limestone
        region_name: us-dfw-1
        image: Fedora-Cloud-Base-35-1.2.x86_64
        flavor: c1.hwetest.1
        name: mirror
        network: "Public Internet"
        key_name: goneri
      register: result
    - name: Add host ansible-limestone-us-dfw-1
      add_host:
        name: ansible-limestone-us-dfw-1
        groups:
          - mirrors
        ansible_ssh_host: "{{ result.server.public_v4 }}"
        ansible_ssh_user: fedora
        ansible_python_interpreter: /bin/python3
        ansible_ssh_extra_args: "-o stricthostkeychecking=no -o userknownhostsfile=/dev/null"
    - name: Spawn the mirror limestone us-slc
      openstack.cloud.server:
        state: present
        cloud: limestone
        region_name: us-slc
        image: Fedora-Cloud-Base-35-1.2.x86_64
        flavor: r1.tiny
        name: mirror
        network: "Public Internet"
        key_name: goneri
      register: result
    - name: Add host ansible-limestone-us-slc
      add_host:
        name: ansible-limestone-us-slc
        groups:
          - mirrors
        ansible_ssh_host: "{{ result.server.public_v4 }}"
        ansible_ssh_user: fedora
        ansible_python_interpreter: /bin/python3
        ansible_ssh_extra_args: "-o stricthostkeychecking=no -o userknownhostsfile=/dev/null"

- hosts: mirrors
  tasks:
    # We've got some problems (limestone/us-dfw-1) with IPv6, we turn it off until
    # we've got more time to investigate.
    - name: Disable IPv6
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.disable_ipv6
        value: 1
        state: present
      become: true

    - set_fact:
        disk_info: "{{ ansible_mounts| selectattr('mount','equalto', '/') | list | first }}"
    - set_fact:
        disk_free: "{{ disk_info['size_available'] / 1024 / 1024 / 1024 }}"
    - debug:
        msg: "Disk free: {{ disk_free }}"
    - name: Ensure we've got at least 5GB free
      assert:
        that: disk_free|int >= 5

    - name: Install skopeo and podman
      package:
        name:
          - skopeo
          - podman
        state: present
      become: true
    - name: Copy the deploy-mirror-on-node.sh script
      copy:
        src: 2-start-registry-service-on-node.d/deploy-mirror-on-node.sh
        dest: deploy-mirror-on-node.sh
    - name: Call deploy-mirror-on-node.sh
      command: bash deploy-mirror-on-node.sh
      args:
        creates: /opt/registry/certs/server.pem
    - name: Spawn the podman container
      containers.podman.podman_container:
        name: test-registry
        image: docker.io/library/registry:2
        volume:
          - /opt/registry/data:/var/lib/registry:z
          - /opt/registry/certs:/certs:z
          - /opt/registry/registry-config.yml:/etc/docker/registry/config.yml:z
        ports:
          - 5000:5000
        env:
          REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/server.pem"
          REGISTRY_HTTP_TLS_KEY: "/certs/server-key.pem"
      become: true
    - name: Create the /opt/sync-registry.sh script
      copy:
        content: |
          #!/bin/bash
          set -eux
          ansible_branches="stable-2.9 stable-2.10 stable-2.11 stable-2.12 stable-2.13 milestone devel"
          for branch in ${ansible_branches}; do
              image=$(curl -s https://raw.githubusercontent.com/ansible/ansible/${branch}/test/lib/ansible_test/_data/completion/docker.txt|awk '/quay.io\/ansible\/default-test-container/ {print $2}'|sed 's,.*=,,')
              if [  -n "${image}" ]; then
                  /bin/skopeo sync --src docker --dest docker ${image} localhost:5000/ansible/
              fi
          done
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/network-ee-unit-tests:stable-2.9 localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/network-ee-unit-tests:stable-2.10 localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/network-ee-unit-tests:stable-2.11 localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/network-ee-unit-tests:stable-2.12 localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/ansible-builder:latest localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/python-builder:latest localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/ansible-runner:latest localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/ansible-runner:stable-2.12-devel localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/ansible-runner:stable-2.11-devel localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/ansible-runner:stable-2.10-devel localhost:5000/ansible/
          /bin/skopeo sync --src docker --dest docker quay.io/ansible/ansible-runner:stable-2.9-devel localhost:5000/ansible/
        dest: /opt/sync-registry.sh
        mode: '0755'
      become: true
    - name: Copy refresh-mirror.service service file
      copy:
        src: "3-install-systemd-services.d/{{ item }}"
        dest: "/etc/systemd/system/{{ item }}"
      become: true
      with_items:
        - refresh-mirror.service
        - refresh-mirror.timer
        - rpm-mirror.service
    - command: podman pull quay.io/gleboude/rpm-mirror
      become: true
    - name: Manually trigger refresh-mirror
      ansible.builtin.systemd:
        state: started
        daemon_reload: yes
        name: refresh-mirror
      become: true
    - name: Enable the timer
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: refresh-mirror.timer
      become: true
    - name: Enable the rpm-mirror
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: rpm-mirror
      become: true
    - name: collect facts about system services
      service_facts:
      register: services_state
      become: true
      retries: 1000
      delay: 10
      until: services_state.ansible_facts.services["refresh-mirror.service"]["state"] != "running"
    - debug: var=services_state
    - debug: var=services
    - name: Ensure the run has not failed
      assert:
        that:
          - services_state.ansible_facts.services["refresh-mirror.service"]["state"] == "stopped"
          - services_state.ansible_facts.services["refresh-mirror.service"]["status"] != "failed"
          - services_state.ansible_facts.services["rpm-mirror.service"]["state"] == "running"
    - name: Save the host IP in a file
      copy:
        content: "{{ ansible_ssh_host }}"
        dest: "host-ip_{{ inventory_hostname }}.txt"
      delegate_to: localhost
    - name: Save the mirror IP
      openstack.cloud.object:
        cloud: rackspace
        region_name: DFW
        name: "{{ inventory_hostname }}"
        container: aaaa
        filename: "host-ip_{{ inventory_hostname }}.txt"
        container_access: public
      delegate_to: localhost
    - name: Clean up the host_ip.txt file
      file:
        path: host_ip.txt
        state: absent

    - name: Wait for the end of the TTL of the CDN
      pause:
        seconds: 900

    - name: Retrieve the IP address
      uri:
        url: "http://c31bfd6bfb009231e691-ba2be89fa62144fd02adcef310422074.r64.cf1.rackcdn.com/{{ inventory_hostname }}"
        return_content: true
      register: mirror_address
      failed_when: false
    - debug:
        var: ansible_ssh_host
    - debug:
        var: mirror_address.content|trim
    - name: Assert the IP on the CDN is up to date
      assert:
        that:
          - mirror_address.content|trim == ansible_ssh_host
    - debug:
        msg: "{{ inventory_hostname }}: {{ mirror_address.content|trim }}"
    - name: Ensure the registry service is running on the mirror
      command: curl --connect-timeout 3 -ks https://{{ mirror_address.content|trim }}:5000
      register: registry_check
      failed_when: false
      when: mirror_address.status == 200
    - name: Test the HTTP proxy
      get_url:
        url: http://mirror.csclub.uwaterloo.ca/fedora/linux/releases/35/Everything/x86_64/os/Packages/0/0ad-0.0.25b-2.fc35.x86_64.rpm
        dest: "/tmp/test-{ inventory_hostname }}"
      environment:
        http_proxy: "http://{{ mirror_address.content|trim }}:3128"
    - assert:
        that:
          - mirror_address.status == 200
          - registry_check.rc == 0
